import toastr from "toastr";
import './OperationsPage.scss';
import ContentArea from "../../components/ContentArea/ContentArea";
import ButtonForm from "../../components/forms/ButtonForm/ButtonForm";
import {getAllOperations, toggleOperationsAutoStarter} from "../../api/operations-api";
import {useEffect, useState} from "react";
import OperationItem from "../../components/OperationItem/OperationItem";
import PremiumOperationItem from "../../components/PremiumOperationItem/PremiumOperationItem";
import OperationInProgress from "../../components/OperationInProgress/OperationInProgress";

export default function OperationsPage() {
  const [operationInProgress, setOperationInProgress] = useState(null);
  const [operationsData, setOperationsData] = useState(null);
  const [operationsPremium, setOperationsPremium] = useState(null);
  const [isAutoStarterEnabled, setIsAutoStarterEnabled] = useState(false);
  const [isLoadingAutoStart, setIsLoadingAutoStart] = useState(false);

  function loadOperations() {
    getAllOperations()
      .then(response => {
        setOperationsData(response.data.operations);
        setIsAutoStarterEnabled(response.data.isOperationAutoStartEnabled);
        setOperationsPremium(response.data.premiumOperations);
        setOperationInProgress(response.data.operationInProgress);
      })
      .catch(error => {
        if (error.response) {
          toastr.error(error.response.data.message)
        }

        console.log(error)
      })
  }

  useEffect(() => {
    loadOperations()
  }, []);

  if (operationsData === null) {
    return 'Loading...'
  }

  return <div id={'operations-page'}>
    <ContentArea title={'Operations'}>
      <div id="auto-starter">
        <ButtonForm
          text={isAutoStarterEnabled ? 'Disable Auto Operation Starter' : 'Enable Operation Auto Starter'}
          isLoading={isLoadingAutoStart}
          showLoadingIcon={isLoadingAutoStart}
          onSubmitHandler={() => {
            setIsLoadingAutoStart(true)
            toggleOperationsAutoStarter()
              .then(response => {
                setIsAutoStarterEnabled(!isAutoStarterEnabled)
                setIsLoadingAutoStart(false)
              })
              .catch(error => {
                if (error.response) {
                  toastr.error(error.response.data.message)
                }

                setIsLoadingAutoStart(false)

                console.log(error)
              })
          }}
        />
      </div>
      {
        operationInProgress === null
          ? <div className="operations-list">
            {
              operationsData.map((operation, index) => <OperationItem key={index + '-operation'} operation={operation} loadOperations={loadOperations}/>)
            }
          </div>
          : <OperationInProgress userOperation={operationInProgress} />
      }
    </ContentArea>
    <ContentArea title={'PREMIUM OPERATIONS'}>
      <div className="premium-operations-list">
        {
          operationsPremium.length > 0
            ? operationsPremium.map((operation, index) => {
              if (operation === null) {
                return;
              }

              return <PremiumOperationItem
                key={index + '-premium-operation'}
                title={operation.title}
                cost={operation.cost}
              />
            })
            : 'No premium operations to buy.'
        }
      </div>
    </ContentArea>
    <ContentArea title={'OPERATIONS INFORMATION'}>
      <ul className={'operations-info'}>
        <li>Operations are like Missions, however there is no timelimit.</li>
        <li>You cannot do Missions and Operations at the same time.</li>
        <li>If enabled, Auto Operation Starter will start a new operation of the same objective you finished.</li>
        <li>Objectives and Payments are random generated by the system. Current rewards can be: points, money, or exp.
        </li>
      </ul>
    </ContentArea>
  </div>
}